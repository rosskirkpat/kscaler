package kubernetes

// Code generated by stub-gen; DO NOT EDIT.

import (
	"fmt"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/rosskirkpat/kscaler/pkg/client"
)

// Node wraps a Kubernetes Node.
type Node struct {
	corev1.Node

	client client.Client
}

// NewNode creates a Node from its Kubernetes Node.
func NewNode(client client.Client, node corev1.Node) (Node, error) {
	createdNode, err := client.Kubernetes.
		CoreV1().
		Nodes().
		Create(client.Ctx, &node, metav1.CreateOptions{})
	if err != nil {
		return Node{}, fmt.Errorf("failed to create node %s: %w", node.Name, err)
	}

	return Node{
		Node: *createdNode,
		client: client,
	}, nil
}

// GetNode gets a node.
func GetNode(client client.Client, name string) (Node, error) {
	options := metav1.GetOptions{}

	node, err := client.Kubernetes.
		CoreV1().
		Nodes().
		Get(client.Ctx, name, options)
	if err != nil {
		return Node{}, fmt.Errorf("failed to get node %s: %w", name, err)
	}

	return Node{
		Node: *node,
		client: client,
	}, nil
}

// ListNodes lists all nodes.
func ListNodes(client client.Client) ([]Node, error) {
	options := metav1.ListOptions{}

	list, err := client.Kubernetes.
		CoreV1().
		Nodes().
		List(client.Ctx, options)
	if err != nil {
		return nil, fmt.Errorf("failed to list nodes: %w", err)
	}

	nodes := make([]Node, 0, len(list.Items))

	for _, item := range list.Items {
		nodes = append(nodes, Node{
			Node: item,
			client: client,
		})
	}

	return nodes, nil
}

// Delete deletes a Node from the Kubernetes cluster.
func (node Node) Delete() error {
	options := metav1.DeleteOptions{}

	err := node.client.Kubernetes.
		CoreV1().
		Nodes().
		Delete(node.client.Ctx, node.Name, options)
	if err != nil {
		return fmt.Errorf("failed to delete node %s: %w", node.Name, err)
	}

	return nil
}

// Update gets the current Node status.
func (node *Node) Update() error {
	options := metav1.GetOptions{}

	update, err := node.client.Kubernetes.
		CoreV1().
		Nodes().
		Get(node.client.Ctx, node.Name, options)
	if err != nil {
		return fmt.Errorf("failed to update node %s: %w", node.Name, err)
	}

	node.Node = *update

	return nil
}

// Save saves the current Node.
func (node *Node) Save() error {
	update, err := node.client.Kubernetes.
		CoreV1().
		Nodes().
		Update(node.client.Ctx, &node.Node, metav1.UpdateOptions{})
	if err != nil {
		return fmt.Errorf("failed to save node %s: %w", node.Name, err)
	}

	node.Node = *update

	return nil
}

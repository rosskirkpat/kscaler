package kubernetes

// Code generated by stub-gen; DO NOT EDIT.

import (
	"fmt"

	appsv1 "k8s.io/api/apps/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/rosskirkpat/kscaler/pkg/client"
)

// StatefulSet wraps a Kubernetes StatefulSet.
type StatefulSet struct {
	appsv1.StatefulSet

	client client.Client
}

// NewStatefulSet creates a StatefulSet from its Kubernetes StatefulSet.
func NewStatefulSet(client client.Client, statefulset appsv1.StatefulSet) (StatefulSet, error) {
	createdStatefulSet, err := client.Kubernetes.
		AppsV1().
		StatefulSets(statefulset.Namespace).
		Create(client.Ctx, &statefulset, metav1.CreateOptions{})
	if err != nil {
		return StatefulSet{}, fmt.Errorf("failed to create statefulset %s in namespace %s: %w", statefulset.Name, statefulset.Namespace, err)
	}

	return StatefulSet{
		StatefulSet: *createdStatefulSet,
		client: client,
	}, nil
}

// GetStatefulSet gets a statefulset in a namespace.
func GetStatefulSet(client client.Client, name string, namespace string) (StatefulSet, error) {
	options := metav1.GetOptions{}

	statefulset, err := client.Kubernetes.
		AppsV1().
		StatefulSets(namespace).
		Get(client.Ctx, name, options)
	if err != nil {
		return StatefulSet{}, fmt.Errorf("failed to get statefulset %s in namespace %s: %w", name, namespace, err)
	}

	return StatefulSet{
		StatefulSet: *statefulset,
		client: client,
	}, nil
}

// ListStatefulSets lists all statefulsets in a namespace.
func ListStatefulSets(client client.Client, namespace string) ([]StatefulSet, error) {
	options := metav1.ListOptions{}

	list, err := client.Kubernetes.
		AppsV1().
		StatefulSets(namespace).
		List(client.Ctx, options)
	if err != nil {
		return nil, fmt.Errorf("failed to list statefulsets in namespace %s: %w", namespace, err)
	}

	statefulsets := make([]StatefulSet, 0, len(list.Items))

	for _, item := range list.Items {
		statefulsets = append(statefulsets, StatefulSet{
			StatefulSet: item,
			client: client,
		})
	}

	return statefulsets, nil
}

// Delete deletes a StatefulSet from the Kubernetes cluster.
func (statefulset StatefulSet) Delete() error {
	options := metav1.DeleteOptions{}

	err := statefulset.client.Kubernetes.
		AppsV1().
		StatefulSets(statefulset.Namespace).
		Delete(statefulset.client.Ctx, statefulset.Name, options)
	if err != nil {
		return fmt.Errorf("failed to delete statefulset %s in namespace %s: %w", statefulset.Name, statefulset.Namespace, err)
	}

	return nil
}

// Update gets the current StatefulSet status.
func (statefulset *StatefulSet) Update() error {
	options := metav1.GetOptions{}

	update, err := statefulset.client.Kubernetes.
		AppsV1().
		StatefulSets(statefulset.Namespace).
		Get(statefulset.client.Ctx, statefulset.Name, options)
	if err != nil {
		return fmt.Errorf("failed to update statefulset %s in namespace %s: %w", statefulset.Name, statefulset.Namespace, err)
	}

	statefulset.StatefulSet = *update

	return nil
}

// Save saves the current StatefulSet.
func (statefulset *StatefulSet) Save() error {
	update, err := statefulset.client.Kubernetes.
		AppsV1().
		StatefulSets(statefulset.Namespace).
		Update(statefulset.client.Ctx, &statefulset.StatefulSet, metav1.UpdateOptions{})
	if err != nil {
		return fmt.Errorf("failed to save statefulset %s in namespace %s: %w", statefulset.Name, statefulset.Namespace, err)
	}

	statefulset.StatefulSet = *update

	return nil
}

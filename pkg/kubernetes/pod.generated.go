package kubernetes

// Code generated by stub-gen; DO NOT EDIT.

import (
	"fmt"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/rosskirkpat/kscaler/pkg/client"
)

// Pod wraps a Kubernetes Pod.
type Pod struct {
	corev1.Pod

	client client.Client
}

// NewPod creates a Pod from its Kubernetes Pod.
func NewPod(client client.Client, pod corev1.Pod) (Pod, error) {
	createdPod, err := client.Kubernetes.
		CoreV1().
		Pods(pod.Namespace).
		Create(client.Ctx, &pod, metav1.CreateOptions{})
	if err != nil {
		return Pod{}, fmt.Errorf("failed to create pod %s in namespace %s: %w", pod.Name, pod.Namespace, err)
	}

	return Pod{
		Pod: *createdPod,
		client: client,
	}, nil
}

// GetPod gets a pod in a namespace.
func GetPod(client client.Client, name string, namespace string) (Pod, error) {
	options := metav1.GetOptions{}

	pod, err := client.Kubernetes.
		CoreV1().
		Pods(namespace).
		Get(client.Ctx, name, options)
	if err != nil {
		return Pod{}, fmt.Errorf("failed to get pod %s in namespace %s: %w", name, namespace, err)
	}

	return Pod{
		Pod: *pod,
		client: client,
	}, nil
}

// ListPods lists all pods in a namespace.
func ListPods(client client.Client, namespace string) ([]Pod, error) {
	options := metav1.ListOptions{}

	list, err := client.Kubernetes.
		CoreV1().
		Pods(namespace).
		List(client.Ctx, options)
	if err != nil {
		return nil, fmt.Errorf("failed to list pods in namespace %s: %w", namespace, err)
	}

	pods := make([]Pod, 0, len(list.Items))

	for _, item := range list.Items {
		pods = append(pods, Pod{
			Pod: item,
			client: client,
		})
	}

	return pods, nil
}

// Delete deletes a Pod from the Kubernetes cluster.
func (pod Pod) Delete() error {
	options := metav1.DeleteOptions{}

	err := pod.client.Kubernetes.
		CoreV1().
		Pods(pod.Namespace).
		Delete(pod.client.Ctx, pod.Name, options)
	if err != nil {
		return fmt.Errorf("failed to delete pod %s in namespace %s: %w", pod.Name, pod.Namespace, err)
	}

	return nil
}

// Update gets the current Pod status.
func (pod *Pod) Update() error {
	options := metav1.GetOptions{}

	update, err := pod.client.Kubernetes.
		CoreV1().
		Pods(pod.Namespace).
		Get(pod.client.Ctx, pod.Name, options)
	if err != nil {
		return fmt.Errorf("failed to update pod %s in namespace %s: %w", pod.Name, pod.Namespace, err)
	}

	pod.Pod = *update

	return nil
}

// Save saves the current Pod.
func (pod *Pod) Save() error {
	update, err := pod.client.Kubernetes.
		CoreV1().
		Pods(pod.Namespace).
		Update(pod.client.Ctx, &pod.Pod, metav1.UpdateOptions{})
	if err != nil {
		return fmt.Errorf("failed to save pod %s in namespace %s: %w", pod.Name, pod.Namespace, err)
	}

	pod.Pod = *update

	return nil
}

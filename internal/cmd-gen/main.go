package main

import (
	"flag"
	"fmt"
	"github.com/iancoleman/strcase"
	"os"
	"strings"
	"text/template"
)

//nolint:lll
const cmdTemplate = `package main

// Code generated by cmd-gen; DO NOT EDIT.

import (
	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

//const {{ .Type }} = "{{ .Type }}"

var (
	{{ .Type }}Cmd = &cobra.Command{
		Use:   "{{ .Type }} [-n 1000] [--kubeconfig /path/to/kube/config]",
		Short: "scale {{ .Type }}",
		Run:   scale{{ toCamel .Type }},
		Hidden: true,
	}
	p{{ .Type }} string
)


func scale{{ toCamel .Type }}(cmd *cobra.Command, args []string) {
	var k KScaleConfig
	logrus.Printf("cmd args: (%v)", cmd.Args)
	cmd.Args = rootCmd.Args
	logrus.Printf("root args: (%v)", rootCmd.Args)
	logrus.Traceln("trace starting")
	logrus.Debugln("debug starting")
	//cmd.PersistentFlags().StringVarP(&number, "number", "n", "", "Number of {{ .Type }} to create")
	//cmd.Flags().StringVarP(&number, "number", "n", "", "Number of {{ .Type }} to create")
	logrus.Printf("args: (%v)", args)
	logrus.Printf("request: %v\n", k.Scale.Request)
	logrus.Printf("getint: %v\n", viper.GetInt("request"))
	logrus.Printf("check number 1: %v\n", viper.GetInt("number"))
	cmd.Flags().Set("number", string(k.Scale.Request))
	logrus.Printf("check number 2: %v\n", viper.GetInt("number"))
	viper.Set("request", KScaleConfig{}.Scale.Request)
	logrus.Printf("check request: %v\n", viper.GetInt("request"))
	logrus.Printf("[scale{{ toCamel .Type }}] attempting to create (%v) resources of type (%v)\n", viper.GetInt("request"), {{ .Type }})
	
	err := Parser()
	if err != nil {
		cmd.Println("")
		cmd.Println("[scale{{ toCamel .Type }}] error encountered")
		logrus.Fatalf(err.Error())
	}
}

`

type parameters struct {
	Type         string
	HasNamespace bool
}

// cmd-gen creates common function for Kubernetes object wrappers.
func main() {
	var parameters parameters

	flag.StringVar(&parameters.Type, "type", "", "type to generate")
	flag.BoolVar(&parameters.HasNamespace, "hasNamespace", true, "type uses namespace")

	flag.Parse()

	funcMap := template.FuncMap{
		//"toLower": strings.ToLower,
		"toCamel": func(s string) string {
			return strcase.ToCamel(s)
		},
	}

	tmpl, err := template.New("resource").Funcs(funcMap).Parse(cmdTemplate)
	if err != nil {
		panic(err)
	}

	outputName := fmt.Sprintf("%s.generated.go", strings.ToLower(parameters.Type))

	output, err := os.Create(outputName)
	if err != nil {
		panic(err)
	}

	defer func() {
		if err := output.Close(); err != nil {
			panic(err)
		}
	}()

	if err := tmpl.Execute(output, parameters); err != nil {
		panic(err)
	}
}
